{"version":3,"sources":["Components/Utils/vec3/common.js","Components/Utils/vec3/vec3.js","Components/Utils/ray.js","Components/Hittables/hittable.js","Components/Hittables/hittable_list.js","Components/Hittables/Sphere.js","Components/Canvas.js","Components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["ARRAY_TYPE","Float32Array","Array","Math","random","PI","create","out","glMatrix","fromValues","x","y","z","add","a","b","subtract","scale","scaleAndAdd","squaredLength","dot","unit_vector","len","sqrt","hypot","i","arguments","length","vec","ray","origin","dir","orig","direction","at","t","vec3","this","hit_record","p","normal","front_face","set_face_normal","r","outward_normal","copy","rec","hittable","hit","t_min","t_max","hittable_list","obj","objects","push","clear","temp_rec","hit_anything","closest_so_far","undefined","sphere","cen","oc","center","half_b","discriminant","radius","root","temp","Canvas","props","hit_sphere","min","ray_color","world","pow","unit_direction","abs","out1","out2","buildImage","color_b","setState","animate","drawImage","clamp","max","canvasDOM","state","style","visibility","image_height","height","image_width","width","aspect_ratio","samples_per_pixel","viewport_width","horizontal","vertical","lower_left_corner","ctx","img","getImageData","pixels","data","numPixels","k","accumulator","passText","document","getElementById","timeTaken","renderMethod","render","setTimeout","bind","start_time","Date","now","j","index","u","v","temp_color","ind","ind2","floor","putImageData","end_time","innerText","time_taken","toPrecision","requestAnimationFrame","toggleAnimation","getContext","onClick","id","className","Component","MainComponent","windowWidth","window","innerWidth","windowHeight","innerHeight","aspect","aspectRatio","React","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","URL","process","href","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.24ee188f.chunk.js","sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE =\n  typeof Float32Array !== \"undefined\" ? Float32Array : Array;\nexport let RANDOM = Math.random;\nexport let ANGLE_ORDER = \"zyx\";\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nif (!Math.hypot)\n  Math.hypot = function () {\n    var y = 0,\n      i = arguments.length;\n    while (i--) y += arguments[i] * arguments[i];\n    return Math.sqrt(y);\n  };\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE !== Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.hypot(x, y, z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0],\n    ay = a[1],\n    az = a[2];\n  let bx = b[0],\n    by = b[1],\n    bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  let angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  let sinTotal = Math.sin(angle);\n\n  let ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  let ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = glMatrix.RANDOM() * 2.0 - 1.0;\n  let zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3];\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y,\n    uvy = qz * x - qx * z,\n    uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy,\n    uuvy = qz * uvx - qx * uvz,\n    uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  let w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  let p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  let p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  let p = [],\n    r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    bx = b[0],\n    by = b[1],\n    bz = b[2],\n    mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n    mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n    mag = mag1 * mag2,\n    cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Return unit vector from given vector\n * @param {ReadonlyVec3} a The vector\n * @returns {vec3} unit Vector from a\n */\nexport function unit_vector(a) {\n  let x = a[0],\n    y = a[1],\n    z = a[2];\n  let len = Math.sqrt(x*x+y*y+z*z);\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x/len;\n  out[1] = y/len;\n  out[2] = z/len;\n  return out; \n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2];\n  return (\n    Math.abs(a0 - b0) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n  );\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  let vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i, l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as vec3 from './vec3/vec3';\n\nclass ray{\n    constructor(origin, dir){\n        if(origin && dir){\n            this.orig = origin;\n            this.dir = dir;\n        }else{\n            this.orig = vec3.fromValues(0,0,0);\n            this.dir = vec3.fromValues(0,0,0);\n        }\n    }\n\n    origin = ()=>this.orig;\n    direction = ()=>this.dir;\n\n    at = (t)=>{\n        let out = vec3.create();\n        return vec3.scaleAndAdd(out,this.orig, this.dir, t)\n    }\n}\n\nexport default ray;","import * as vec3 from '../Utils/vec3/vec3';\n\nfunction hit_record(){\n    this.p = vec3.create();\n    this.normal = vec3.create();\n    this.t = 0;\n    this.front_face = false;\n    this.set_face_normal = (r, outward_normal)=>{\n        this.front_face = vec3.dot(r.direction(),outward_normal);\n        this.normal = this.front_face?outward_normal:-outward_normal;\n    }\n    this.copy = (rec)=>{\n        this.p = rec.p;\n        this.normal = rec.normal;\n        this.t = rec.t;\n        this.front_face = rec.front_face;\n    }\n}\n\nclass hittable{\n    hit = (ray, t_min, t_max, hit_record)=>{}\n}\n\nexport {hittable, hit_record};\n\n","import {hittable, hit_record} from './hittable';\n\nclass hittable_list extends hittable{\n    objects = [];\n    constructor(obj){\n        super();\n        if(obj!==undefined){\n            this.add(obj);\n        }\n    }\n    add = (obj)=>this.objects.push(obj);\n    length = ()=>(this.objects.length);\n    clear = ()=>{this.objects = []};\n\n    hit = (r, t_min, t_max, rec)=>{\n        let temp_rec = new hit_record();\n        let hit_anything = false;\n        let closest_so_far = t_max;\n        for(let i =0;i<this.length();i++){\n            if(this.objects[i].hit(r, t_min, closest_so_far, temp_rec)){\n                hit_anything=true;\n                closest_so_far = temp_rec.t;\n                rec.copy(temp_rec);\n            }\n        }\n        return hit_anything;\n    }\n}\n\nexport default hittable_list;","import {hittable} from './hittable';\nimport * as vec3 from '../Utils/vec3/vec3';\n\nclass sphere extends hittable{\n    constructor(cen, r){\n        super();\n        this.center = cen;\n        this.radius = r\n    }\n\n    hit = (r, t_min, t_max, rec)=>{\n        let oc = vec3.create();\n        oc = vec3.subtract(oc, r.origin(), this.center);\n        const a = vec3.squaredLength(r.direction());\n        const half_b = vec3.dot(oc, r.direction());\n        const c = vec3.squaredLength(oc) - this.radius*this.radius;\n        const discriminant = half_b*half_b - a*c;\n\n        if(discriminant>0){\n            const root = Math.sqrt(discriminant);\n            let temp = (-half_b-root)/a;\n\n            if(temp < t_max && temp>t_min){\n                rec.t = temp;\n                rec.p = r.at(rec.t);\n                \n                let outward_normal = vec3.create();\n                outward_normal = vec3.subtract(outward_normal, rec.p, this.center);\n                outward_normal = vec3.unit_vector(outward_normal);\n                rec.set_face_normal(r, outward_normal);\n                return true;\n            }\n            temp = (-half_b+root)/a;\n            if(temp < t_max && temp>t_min){\n                rec.t = temp;\n                rec.p = r.at(rec.t);\n                let outward_normal = vec3.create();\n                outward_normal = vec3.subtract(outward_normal, rec.p, this.center);\n                outward_normal = vec3.unit_vector(outward_normal);\n                rec.set_face_normal(r, outward_normal);\n                return true;\n            } \n        }\n        return false;\n    }\n}\n\n\nexport default sphere;","import React, { Component } from 'react';\n// import {vec3, point3, color} from './Utils/vec3';\nimport * as vec3 from './Utils/vec3/vec3';\nimport ray from './Utils/ray';\nimport {hit_record} from './Hittables/hittable';\nimport hittable_list from './Hittables/hittable_list';\nimport sphere from './Hittables/Sphere';\n\nexport class Canvas extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            canvasDOM:null,\n            ctx:null,\n            animate:false\n        }\n        this.b =0;\n    }\n\n    componentDidMount(){\n        let canvasDOM = document.getElementById('myCanvas');\n        canvasDOM.style.visibility =\"hidden\";\n        canvasDOM.width = this.props.width;\n        canvasDOM.height = this.props.height;\n        let ctx = canvasDOM.getContext('2d');\n        this.setState({\n            canvasDOM:canvasDOM,\n            ctx:ctx\n        });        \n    }\n    hit_sphere = (center, radius, r)=>{\n        let oc = vec3.create();\n        oc = vec3.subtract(oc, r.origin(), this.center);\n        const a = vec3.squaredLength(r.direction());\n        const half_b = vec3.dot(oc, r.direction());\n        const c = vec3.squaredLength(oc) - this.radius*this.radius;\n        const discriminant = half_b*half_b - a*c;\n        if(discriminant<0){\n            return -1.0\n        }\n        return Math.min((-half_b - Math.sqrt(discriminant))/a,(-half_b + Math.sqrt(discriminant))/a)\n    }\n    ray_color = (r, b, world)=>{\n        let rec = new hit_record();\n        if(world.hit(r,0, Math.pow(10,10)/1.0, rec)){\n            return vec3.scale(vec3.create(),vec3.add(vec3.create(), rec.normal, vec3.fromValues(1,1,1)),0.5)\n        }\n        const unit_direction = vec3.unit_vector(r.direction());\n        let t = Math.abs(unit_direction[1]);\n        let out1 = vec3.scale(vec3.create(), vec3.fromValues(1,1,1),(1.0-t));\n        let out2 = vec3.scale(vec3.create(), vec3.fromValues(0.5, 0.7, b), t);\n        return vec3.add(vec3.create(), out1, out2);\n    }\n    buildImage = (color_b)=>{\n        this.setState({\n            animate:false\n        },()=>{\n            this.b = 0;\n            this.drawImage(color_b);\n        })\n    }\n\n    clamp = (x, min, max)=>{\n        if(x<min) return min;\n        if(x>max) return max;\n        return x;\n    }\n    drawImage = (color_b)=> {\n        // Image Properties\n        let canvasDOM = this.state.canvasDOM;\n        canvasDOM.style.visibility=\"visible\";\n        const image_height = canvasDOM.height;\n        const image_width = canvasDOM.width;\n        const aspect_ratio = image_width/image_height;\n        const samples_per_pixel = this.props.samples_per_pixel;\n\n        // World\n        let world = new hittable_list();\n        world.add(new sphere(vec3.fromValues(0,0,-1), 0.5));\n        world.add(new sphere(vec3.fromValues(-1,0,-1), 0.25));\n        world.add(new sphere(vec3.fromValues(1,0,-1), 0.25));\n        world.add(new sphere(vec3.fromValues(0,1,-1), 0.25));\n\n        world.add(new sphere(vec3.fromValues(2,0,1), 0.5));\n        world.add(new sphere(vec3.fromValues(1,0,1), 0.25));\n        world.add(new sphere(vec3.fromValues(3,0,1), 0.25));\n        world.add(new sphere(vec3.fromValues(2,1,1), 0.25));\n\n        world.add(new sphere(vec3.fromValues(-2,0,2), 0.5));\n        world.add(new sphere(vec3.fromValues(-1,0,2.4), 0.25));\n        world.add(new sphere(vec3.fromValues(-3,0,2.9), 0.25));\n        world.add(new sphere(vec3.fromValues(-2,1,3), 0.25));\n\n        world.add(new sphere(vec3.fromValues(0,-100.5,-1), 100));\n\n        //Camera Properties\n        const viewport_height = 2.0;\n        const viewport_width = aspect_ratio*viewport_height;\n        const focal_length = 1.0\n\n        const origin = vec3.fromValues(0,0, color_b);\n        const horizontal = vec3.fromValues(viewport_width, 0, 0);\n        const vertical = vec3.fromValues(0, viewport_height, 0);\n        let lower_left_corner = vec3.create();\n        vec3.scaleAndAdd(lower_left_corner,origin,horizontal,-0.5);\n        vec3.scaleAndAdd(lower_left_corner,lower_left_corner,vertical,-0.5);\n        vec3.subtract(lower_left_corner,lower_left_corner, vec3.fromValues(0,0, focal_length));\n\n        // Render\n        let ctx = this.state.ctx;\n        let img = ctx.getImageData(0, 0, image_width, image_height);\n        let pixels = img.data;\n        let numPixels = pixels.length/4;\n        let k = 1;\n        let accumulator = new Float32Array(numPixels*3);\n        let passText = document.getElementById('passValue');\n        let timeTaken = document.getElementById('timeTaken');\n        function render(){\n            if(k<samples_per_pixel) setTimeout(render.bind(this));\n            const start_time = Date.now();\n            for(let j =0;j<image_height;j++){\n                for(let i =0;i<image_width;i++){\n                    const index = ((image_height-j-1) * image_width + i) * 3;\n                    let u = (i+Math.random())/(image_width+1);\n                    let v = (j+Math.random())/(image_height+1);\n                    let direction = vec3.create();\n                    vec3.scaleAndAdd(direction,lower_left_corner,horizontal,u);\n                    vec3.scaleAndAdd(direction,direction,vertical,v);\n                    vec3.subtract(direction,direction, origin);\n                    const r = new ray(origin, direction)\n                    let temp_color = this.ray_color(r, Math.abs(color_b), world);\n                    accumulator[index] += temp_color[0];\n                    accumulator[index+1] += temp_color[1];\n                    accumulator[index+2] += temp_color[2];\n                }\n            }\n            for(let p =0;p<numPixels;p++){\n                const ind = p*4;\n                const ind2 = p*3;\n                pixels[ind] = Math.floor(this.clamp(accumulator[ind2]/k,0,0.9999)*256);\n                pixels[ind+1] = Math.floor(this.clamp(accumulator[ind2+1]/k, 0, 0.9999)*256);\n                pixels[ind+2] = Math.floor(this.clamp(accumulator[ind2+2]/k, 0, 0.9999)*256);\n                pixels[ind+3] = 255;\n            }\n            ctx.putImageData(img, 0,0)\n            const end_time = Date.now();\n            passText.innerText = `Pass: ${k}/${samples_per_pixel}`;\n            const time_taken = ((end_time-start_time)/1000).toPrecision(3);\n            timeTaken.innerText = `Time Taken: ${time_taken}s`\n            k++;\n        }\n        let renderMethod = render.bind(this);\n        setTimeout(()=>renderMethod());\n\n    }\n\n    animate = ()=>{\n        if(this.state.animate){\n            requestAnimationFrame(this.animate);\n            this.drawImage(this.b);\n            this.b += 0.2;\n            if(this.b>20){\n                this.b =0;\n            }\n        }\n    }\n    toggleAnimation = ()=>{\n        this.setState({\n            animate:!this.state.animate\n        },()=>{\n            if(this.state.animate) this.animate()\n        })\n    }\n    render() {\n        return (\n            <> \n                <button onClick={()=>this.buildImage(1.0)} id = \"buildImageBtn\" className=\"btn\">Build Image</button>\n                <button onClick={()=>this.toggleAnimation()} id = \"buildImageBtn2\" className=\"btn\">{this.state.animate?'Stop ':'Start ' }Animation</button>\n                <p id = \"passValue\"></p>\n                <p id = \"timeTaken\"></p>\n                <canvas id = \"myCanvas\"></canvas>\n            </>\n        )\n    }\n}\n\nexport default Canvas;\n\n","import React from 'react';\nimport Canvas from './Canvas';\nclass MainComponent extends React.Component {\n    constructor(props){\n        super(props);\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        const aspect = windowWidth/windowHeight;\n        const scale = 0.5;\n        const width = Math.floor(windowWidth*scale);\n        const height = Math.floor(windowHeight*scale);\n        this.state = {\n            aspectRatio:aspect,\n            width:width,\n            height:height,\n            samples_per_pixel:1\n        }\n    }\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"main-content\">\n                    <div className=\"canvas-container\">\n                        <Canvas samples_per_pixel={this.state.samples_per_pixel} width = {this.state.width} height={this.state.height}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default MainComponent;\n","import React from 'react';\nimport './App.css';\nimport MainComponent from './Components/MainComponent';\n\nfunction App() {\n  return (<MainComponent/>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}